@use "sass:list";
@use "sass:map";

$colors: (
    "primary-green": #00BFA5,
    "secondary-red": #E61236,
    "text-color": #37474F,
    "grey-one": #757575,
    "grey-border": #D4D4D4,
    "grey-background": #F5F5F5,
    "white": #FFFFFF
);

@each $name, $value in $colors {
    .bg-#{$name} {
        background-color: $value !important;
    }
    .text-#{$name} {
        color: $value !important;
    }
    .border-#{$name} {
        border-color: $value !important;
    }
}

$font_weights: (400, 500, 700);

@each $weight in $font_weights {
    @font-face {
        font-family: "Vazir";
        src: url("/fonts/Vazir/Vazir-#{$weight}.ttf") format("truetype");
        font-weight: #{$weight};
        font-style: normal;
    }
}

$spacing_sizes: ();
@for $i from 0 through 48 {
    $spacing_sizes: list.append($spacing_sizes, #{$i}px);
}

$utilities: (
    'p': "padding",
    'pt': "padding-top",
    'pr': "padding-right",
    'pb': "padding-bottom",
    'pl': "padding-left",
    'm': "margin",
    'mt': "margin-top",
    'mr': "margin-right",
    'mb': "margin-bottom",
    'ml': "margin-left",
    'fs': "font-size",
    'br': "border-radius",
    'h': "height",
    'gap': "gap",
    "t": "top",
    "b": "bottom",
    "l": "left",
    "r": "right"
);

@mixin generate-utilities($utilities, $spacing_sizes) {
    @each $abbr, $property in $utilities {
        @each $value in $spacing_sizes {
            .#{$abbr}-#{$value} {
                #{$property}: $value;
            }
        }
    }
}

@include generate-utilities($utilities, $spacing-sizes);

$box_sizes: ();
@for $i from 0 through 100 {
    $box_sizes: list.append($box_sizes, #{$i});
}

$box_utilities: (
    'w': "width",
    'h': "height"
);

$breakpoints: (
    'sm': 576px,
    'md': 768px,
    'lg': 992px,
    'xl': 1200px
);

@mixin generate-utilities($box_utilities, $box_sizes, $breakpoints) {
    @each $abbr, $property in $box_utilities {
        @each $value in $box_sizes {
            .#{$abbr}-#{$value} {
                #{$property}: $value + "%";
            }
            @each $breakpoint, $bp-value in $breakpoints {
                $keys: map.keys($breakpoints);
                $current-index: list.index($keys, $breakpoint);
                $next-breakpoint: if($current-index < list.length($keys), map.get($breakpoints, list.nth($keys, $current-index + 1)), null);

                @if $next-breakpoint {
                    @media (min-width: #{$bp-value}) and (max-width: #{$next-breakpoint - 1px}) {
                        .#{$abbr}-#{$breakpoint}-#{$value} {
                            #{$property}: $value + "% !important";
                        }
                    }
                } @else {
                    @media (min-width: #{$bp-value}) {
                        .#{$abbr}-#{$breakpoint}-#{$value} {
                            #{$property}: $value + "% !important";
                        }
                    }
                }
            }
        }
    }
}

@include generate-utilities($box_utilities, $box_sizes, $breakpoints);

html {
    font-family: "Vazir";
}

input:focus {
    outline: none;
}

.border-solid {
    border-style: solid;
}

.loader {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background-color: #fff;
    box-shadow: 32px 0 #fff, -32px 0 #fff;
    position: relative;
    animation: flash 0.5s ease-out infinite alternate;
}

@keyframes flash {
    0% {
        background-color: #FFF2;
        box-shadow: 32px 0 #FFF2, -32px 0 #FFF;
    }
    50% {
        background-color: #FFF;
        box-shadow: 32px 0 #FFF2, -32px 0 #FFF2;
    }
    100% {
        background-color: #FFF2;
        box-shadow: 32px 0 #FFF, -32px 0 #FFF2;
    }
}
      